{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/services.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","postSelector","className","map","post","isSelected","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","addNewComment","onSetError","useState","name","setName","email","setEmail","comment","setComment","loading","setLoading","nameError","setNameError","emailError","serEmailError","commentError","setCommentError","handleFormSubmit","event","a","preventDefault","newComment","postId","newCommentFromServer","onSubmit","htmlFor","value","placeholder","onChange","target","disabled","PostDetails","comments","setComments","error","setError","isOpenedForm","setIsOpenedForm","loadCommentsFromServer","usersFromServer","useEffect","handleDeleteComment","deleteComment","prev","filter","com","length","href","UserSelector","userSelector","users","selectedUser","isActive","setIsActive","onBlur","role","user","String","onMouseDown","App","setUsers","setPosts","setSelectedUser","setSelectedPost","loadUserFromServer","loadPostsFromServer","selected","userId","postsFromServer","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcd5113f.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null;\n  selectedPost: Post | null;\n  postSelector(post: Post | null): void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  postSelector,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map(post => {\n            const isSelected = selectedPost?.id === post.id;\n\n            const onSelectPost = () => {\n              if (isSelected) {\n                postSelector(null);\n              } else {\n                postSelector(post);\n              }\n            };\n\n            return (\n              <tr key={post.id} data-cy=\"Post\">\n                <td data-cy=\"PostId\">\n                  {post.id}\n                </td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={cn(\n                      'button is-link',\n                      { 'is-light': !isSelected },\n                    )}\n                    onClick={onSelectPost}\n                  >\n                    {isSelected\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\nimport { addComment } from '../api/services';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post | null;\n  addNewComment(commentFromServer: Comment): void;\n  onSetError(): void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  addNewComment,\n  onSetError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  // const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [nameError, setNameError] = useState(false);\n  const [emailError, serEmailError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n\n  const cleanFormHandler = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setNameError(false);\n    serEmailError(false);\n    setCommentError(false);\n  };\n\n  const onSetName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameError(false);\n    setName(event.target.value);\n  };\n\n  const onSetEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    serEmailError(false);\n    setEmail(event.target.value);\n  };\n\n  const onSetComment = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentError(false);\n    setComment(event.target.value);\n  };\n\n  const handleFormSubmit = async (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n\n    if (!name) {\n      setNameError(true);\n    }\n\n    if (!email) {\n      serEmailError(true);\n    }\n\n    if (!comment) {\n      setCommentError(true);\n    }\n\n    if (!name || !email || !comment) {\n      return;\n    }\n\n    let newComment;\n\n    setLoading(true);\n\n    try {\n      if (selectedPost) {\n        newComment = {\n          postId: selectedPost.id,\n          name,\n          email,\n          body: comment,\n        };\n\n        const newCommentFromServer = await addComment(newComment);\n\n        addNewComment(newCommentFromServer);\n\n        setComment('');\n      }\n    } catch {\n      onSetError();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            onChange={onSetName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {nameError\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={email}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            onChange={onSetEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {nameError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {emailError\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={comment}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'textarea',\n              { 'is-danger': commentError },\n            )}\n            onChange={onSetComment}\n          />\n        </div>\n\n        {commentError\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            disabled={loading}\n            type=\"submit\"\n            className={cn(\n              'button is-link',\n              { 'is-loading': loading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => cleanFormHandler()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  data: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getComments } from '../api/services';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isOpenedForm, setIsOpenedForm] = useState(false);\n\n  const onSetError = () => {\n    setError(true);\n  };\n\n  const loadCommentsFromServer = async (post: Post) => {\n    setLoading(true);\n\n    try {\n      const usersFromServer = await getComments(post.id);\n\n      setComments(usersFromServer);\n    } catch {\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addNewComment = (newComment: Comment) => {\n    setComments(prev => [...prev, newComment]);\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      setError(false);\n      setComments([]);\n      loadCommentsFromServer(selectedPost);\n    }\n  }, [selectedPost]);\n\n  const handleDeleteComment = (id: number) => {\n    try {\n      deleteComment(id);\n\n      setComments((prev) => prev.filter(com => com.id !== id));\n    } catch {\n      setComments(prev => prev);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {`${selectedPost?.body}`}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && <Loader />}\n\n          {error\n            && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n\n          {comments?.length === 0 && !loading\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {comments?.length !== 0 && !loading\n            && (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {comments?.map(comment => {\n                  return (\n                    <article\n                      key={comment.id}\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleDeleteComment(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  );\n                })}\n              </>\n            )}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsOpenedForm(true)}\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {isOpenedForm\n          && (\n            <NewCommentForm\n              selectedPost={selectedPost}\n              addNewComment={addNewComment}\n              onSetError={onSetError}\n            />\n          )}\n\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  userSelector(user: User): void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  userSelector,\n  users,\n  selectedUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(prev => !prev)}\n          onBlur={() => setIsActive(false)}\n        >\n          <span>\n            {selectedUser\n              ? `${selectedUser.name}`\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={String(user.id)}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onMouseDown={() => userSelector(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getPosts, getUsers } from './api/services';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const selectUserHandler = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  const selectPostHandler = (post: Post) => {\n    setSelectedPost(post);\n  };\n\n  const loadUserFromServer = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    setError(false);\n    loadUserFromServer();\n  }, []);\n\n  const loadPostsFromServer = async (selected: User | null) => {\n    if (!selected) {\n      return;\n    }\n\n    setSelectedPost(null);\n\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getPosts(selected.id);\n\n      setPosts(postsFromServer);\n    } catch {\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUser) {\n      setError(false);\n      loadPostsFromServer(selectedUser);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  userSelector={selectUserHandler}\n                  selectedUser={selectedUser}\n                  users={users}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {loading && <Loader />}\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {!selectedUser && !loading\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {selectedUser && posts?.length !== 0 && !loading\n                  && (\n                    <PostsList\n                      posts={posts}\n                      selectedPost={selectedPost}\n                      postSelector={selectPostHandler}\n                    />\n                  )}\n\n                {posts?.length === 0 && selectedUser && !loading\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost\n                && (\n                  <PostDetails\n                    selectedPost={selectedPost}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}